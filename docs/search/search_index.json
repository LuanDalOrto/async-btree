{"config":{"lang":["en"],"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Overview Async behavior tree for python Versions following Semantic Versioning What\u2019s a behavior tree ? Unlike a Finite State Machine, a Behaviour Tree is a tree of hierarchical nodes that controls the flow of decision and the execution of \u201ctasks\u201d or, as we will call them further, \u201cActions\u201d. \u2013 behaviortree If your new (or not) about behavior tree, you could spend some time on this few links: Behavior trees for AI: How they work by Chris Simpson Introduction to BTs Few implementation libraries: task_behavior_engine A behavior tree based task engine written in Python pi_trees a Python/ROS library for implementing Behavior Trees pr_behavior_tree A simple python behavior tree library based on coroutines btsk Behavior Tree Starter Kit behave A behavior tree implementation in Python Why another library so ? When you study behavior tree implementation, reactive node, dynamic change, runtime execution, etc \u2026 At a moment you\u2019re build more or less something that mimic an evaluator \u2018eval/apply\u2019 or a compilator, with a complex hierachical set of class. All complexity came with internal state management, using tree of blackboard to avoid global variable, multithreading issue, maybe few callback etc \u2026 This break the simplicity and beauty of your initial design. What I find usefull with behavior tree: clarity of expression node tree representation possibility to reuse behavior add external measure to dynamicaly change a behavior, a first step on observable pattern\u2026 As I\u2019ve used OOP for years (very long time), I will try to avoid class tree and prefer using the power of functionnal programming to obtain what I want: add metadata on a sematic construction, deal with closure, use function in parameters or in return value\u2026 And a last reason, more personal, it that i would explore python expressivity. So, in this module, I purpose you to use the concept of coroutines, and their mecanisms to manage the execution flow. By this way: we reuse simple language idiom to manage state, parameter, etc no design constraint on action implementation most of language build block could be reused You could build expression like this: 1 2 3 4 5 6 7 8 9 async def a_func (): \"\"\"A great function\"\"\" return \"a\" async def b_decorator ( child_value , other = \"\" ): \"\"\"A great decorator...\"\"\" return f \"b{child_value}{other}\" assert run ( decorate ( a_func , b_decorator )) == \"ba\" This expression apply b_decorator on function a_func . Note that decorate ( a_func , b_decorator ) is not an async function, only action, or condition are async function. Few guidelines of this implementation: In order to mimic all NodeStatus (success, failure, running), I replace this by truthy/falsy meaning of evaluation value. A special dedicated exception decorate standard exception in order to give them a Falsy meaning. Blackboard pattern, act as a manager of context variable for behavior tree. With python 3, please\u2026 simply use contextvars ! In order to be able to build a sematic tree, I\u2019ve introduce a metadata tuple added on function implementation. The rest is just implementation details.. A little note: You should not use this until you\u2019re ready to think about what you\u2019re doing :) Note about \u2018async\u2019 framework As we use async function as underlaying mechanism to manage the execution flow, the standard library asyncio is pretty fine. But, (always a but somewhere isn\u2019t it\u2026), you should read this [amazing blog post}( https://vorpus.org/blog/some-thoughts-on-asynchronous-api-design-in-a-post-asyncawait-world/ ) by Nathaniel J. Smith. And next study curio framework in deep. As curio say: Don\u2019t Use Curio if You\u2019re Allergic to Curio Personaly, after few time of testing and reading curio code, I\u2019m pretty addict. Setup Requirements Python 3.7+ Installation Install this library directly into an activated virtual environment: 1 $ pip install async-btree or add it to your Poetry project: 1 $ poetry add async-btree Usage After installation, the package can imported: 1 2 3 $ python >>> import async_btree >>> async_btree.__version__ License 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 **The MIT License (MIT)** Copyright &copy; 2019, Jerome Guibert Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE. Contributing This project is based on Jace\u2019s Python Template . This is a cookiecutter template for a typical Python library following modern packaging conventions. It utilizes popular libraries alongside Make and Graphviz to fully automate all development and deployment tasks. My main requirement was to find something wich use Poetry project to manage python dependencies. Other template exist like Cookiecutter PyPackage , maybe a next time ? Setup Requirements Make: macOS: $ xcode-select --install Linux: https://www.gnu.org/software/make Windows: https://mingw.org/download/installer Pyenv: https://github.com/pyenv/pyenv#installation Python: $ pyenv install 3 .7.3 Note for MacOS 10.14 user : 1 SDKROOT = /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX10.14.sdk MACOSX_DEPLOYMENT_TARGET = 10 .14 pyenv install 3 .7.3 * Poetry: https://poetry.eustace.io/docs/#installation Note: 1 poetry config settings.virtualenvs.path \" ${ HOME } /.virtualenvs\" * Graphviz: * macOS: $ brew install graphviz * Linux: https://graphviz.org/download * Windows: https://graphviz.org/download To confirm these system dependencies are configured correctly: 1 $ make doctor Installation Install project dependencies into a virtual environment: 1 $ make install Development Tasks Manual Run the tests: 1 $ make test Run static analysis: 1 $ make check Build the documentation: 1 $ make docs Automatic Keep all of the above tasks running on change: 1 $ make watch In order to have OS X notifications, brew install terminal - notifier . Continuous Integration The CI server will report overall build status: 1 $ make ci Release Tasks Release to PyPI: 1 $ make upload","title":"Home"},{"location":"#overview","text":"Async behavior tree for python Versions following Semantic Versioning","title":"Overview"},{"location":"#whats-a-behavior-tree","text":"Unlike a Finite State Machine, a Behaviour Tree is a tree of hierarchical nodes that controls the flow of decision and the execution of \u201ctasks\u201d or, as we will call them further, \u201cActions\u201d. \u2013 behaviortree If your new (or not) about behavior tree, you could spend some time on this few links: Behavior trees for AI: How they work by Chris Simpson Introduction to BTs Few implementation libraries: task_behavior_engine A behavior tree based task engine written in Python pi_trees a Python/ROS library for implementing Behavior Trees pr_behavior_tree A simple python behavior tree library based on coroutines btsk Behavior Tree Starter Kit behave A behavior tree implementation in Python","title":"What's a behavior tree ?"},{"location":"#why-another-library-so","text":"When you study behavior tree implementation, reactive node, dynamic change, runtime execution, etc \u2026 At a moment you\u2019re build more or less something that mimic an evaluator \u2018eval/apply\u2019 or a compilator, with a complex hierachical set of class. All complexity came with internal state management, using tree of blackboard to avoid global variable, multithreading issue, maybe few callback etc \u2026 This break the simplicity and beauty of your initial design. What I find usefull with behavior tree: clarity of expression node tree representation possibility to reuse behavior add external measure to dynamicaly change a behavior, a first step on observable pattern\u2026 As I\u2019ve used OOP for years (very long time), I will try to avoid class tree and prefer using the power of functionnal programming to obtain what I want: add metadata on a sematic construction, deal with closure, use function in parameters or in return value\u2026 And a last reason, more personal, it that i would explore python expressivity. So, in this module, I purpose you to use the concept of coroutines, and their mecanisms to manage the execution flow. By this way: we reuse simple language idiom to manage state, parameter, etc no design constraint on action implementation most of language build block could be reused You could build expression like this: 1 2 3 4 5 6 7 8 9 async def a_func (): \"\"\"A great function\"\"\" return \"a\" async def b_decorator ( child_value , other = \"\" ): \"\"\"A great decorator...\"\"\" return f \"b{child_value}{other}\" assert run ( decorate ( a_func , b_decorator )) == \"ba\" This expression apply b_decorator on function a_func . Note that decorate ( a_func , b_decorator ) is not an async function, only action, or condition are async function. Few guidelines of this implementation: In order to mimic all NodeStatus (success, failure, running), I replace this by truthy/falsy meaning of evaluation value. A special dedicated exception decorate standard exception in order to give them a Falsy meaning. Blackboard pattern, act as a manager of context variable for behavior tree. With python 3, please\u2026 simply use contextvars ! In order to be able to build a sematic tree, I\u2019ve introduce a metadata tuple added on function implementation. The rest is just implementation details.. A little note: You should not use this until you\u2019re ready to think about what you\u2019re doing :)","title":"Why another library so ?"},{"location":"#note-about-async-framework","text":"As we use async function as underlaying mechanism to manage the execution flow, the standard library asyncio is pretty fine. But, (always a but somewhere isn\u2019t it\u2026), you should read this [amazing blog post}( https://vorpus.org/blog/some-thoughts-on-asynchronous-api-design-in-a-post-asyncawait-world/ ) by Nathaniel J. Smith. And next study curio framework in deep. As curio say: Don\u2019t Use Curio if You\u2019re Allergic to Curio Personaly, after few time of testing and reading curio code, I\u2019m pretty addict.","title":"Note about 'async' framework"},{"location":"#setup","text":"","title":"Setup"},{"location":"#requirements","text":"Python 3.7+","title":"Requirements"},{"location":"#installation","text":"Install this library directly into an activated virtual environment: 1 $ pip install async-btree or add it to your Poetry project: 1 $ poetry add async-btree","title":"Installation"},{"location":"#usage","text":"After installation, the package can imported: 1 2 3 $ python >>> import async_btree >>> async_btree.__version__","title":"Usage"},{"location":"#license","text":"1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 **The MIT License (MIT)** Copyright &copy; 2019, Jerome Guibert Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.","title":"License"},{"location":"#contributing","text":"This project is based on Jace\u2019s Python Template . This is a cookiecutter template for a typical Python library following modern packaging conventions. It utilizes popular libraries alongside Make and Graphviz to fully automate all development and deployment tasks. My main requirement was to find something wich use Poetry project to manage python dependencies. Other template exist like Cookiecutter PyPackage , maybe a next time ?","title":"Contributing"},{"location":"#setup_1","text":"","title":"Setup"},{"location":"#requirements_1","text":"Make: macOS: $ xcode-select --install Linux: https://www.gnu.org/software/make Windows: https://mingw.org/download/installer Pyenv: https://github.com/pyenv/pyenv#installation Python: $ pyenv install 3 .7.3 Note for MacOS 10.14 user : 1 SDKROOT = /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX10.14.sdk MACOSX_DEPLOYMENT_TARGET = 10 .14 pyenv install 3 .7.3 * Poetry: https://poetry.eustace.io/docs/#installation Note: 1 poetry config settings.virtualenvs.path \" ${ HOME } /.virtualenvs\" * Graphviz: * macOS: $ brew install graphviz * Linux: https://graphviz.org/download * Windows: https://graphviz.org/download To confirm these system dependencies are configured correctly: 1 $ make doctor","title":"Requirements"},{"location":"#installation_1","text":"Install project dependencies into a virtual environment: 1 $ make install","title":"Installation"},{"location":"#development-tasks","text":"","title":"Development Tasks"},{"location":"#manual","text":"Run the tests: 1 $ make test Run static analysis: 1 $ make check Build the documentation: 1 $ make docs","title":"Manual"},{"location":"#automatic","text":"Keep all of the above tasks running on change: 1 $ make watch In order to have OS X notifications, brew install terminal - notifier .","title":"Automatic"},{"location":"#continuous-integration","text":"The CI server will report overall build status: 1 $ make ci","title":"Continuous Integration"},{"location":"#release-tasks","text":"Release to PyPI: 1 $ make upload","title":"Release Tasks"},{"location":"overview/","text":"","title":"overview"},{"location":"about/changelog/","text":"0.1.2 (2019-07-05) Stable version flag Remove alpha note 0.1.0 (2019-07-05) Added Project Management: initial project structure based on jacebrowning/template-python initial project configuration follow Semantic Versioning configure travis-ci publish alpha version (not functional) on pypi configure coverage configure scrutinizer remove pylint.ini to a simple .pylintrc (add ide support) disable pylint bad-continuation (bug with pep8 formater) declare extra dependency configure black and isort refactorise makefile poetry run introduce flake8 as linter Documentation: replace mkdocs with pydoc-markdown Code: define \u2018definition\u2019 module to declare all common definiton of btree define \u2018utils\u2019 module to declare few async function like afilter, amap fix flake8 syntax error fix mypy typing error add basic test unit fix typing declaration complete code coverage","title":"Release Notes"},{"location":"about/changelog/#012-2019-07-05","text":"Stable version flag Remove alpha note","title":"0.1.2 (2019-07-05)"},{"location":"about/changelog/#010-2019-07-05","text":"Added Project Management: initial project structure based on jacebrowning/template-python initial project configuration follow Semantic Versioning configure travis-ci publish alpha version (not functional) on pypi configure coverage configure scrutinizer remove pylint.ini to a simple .pylintrc (add ide support) disable pylint bad-continuation (bug with pep8 formater) declare extra dependency configure black and isort refactorise makefile poetry run introduce flake8 as linter Documentation: replace mkdocs with pydoc-markdown Code: define \u2018definition\u2019 module to declare all common definiton of btree define \u2018utils\u2019 module to declare few async function like afilter, amap fix flake8 syntax error fix mypy typing error add basic test unit fix typing declaration complete code coverage","title":"0.1.0 (2019-07-05)"},{"location":"about/code_of_conduct/","text":"Contributor Covenant Code of Conduct Our Pledge In the interest of fostering an open and welcoming environment, we as contributors and maintainers pledge to making participation in our project and our community a harassment-free experience for everyone, regardless of age, body size, disability, ethnicity, sex characteristics, gender identity and expression, level of experience, education, socio-economic status, nationality, personal appearance, race, religion, or sexual identity and orientation. Our Standards Examples of behavior that contributes to creating a positive environment include: Using welcoming and inclusive language Being respectful of differing viewpoints and experiences Gracefully accepting constructive criticism Focusing on what is best for the community Showing empathy towards other community members Examples of unacceptable behavior by participants include: The use of sexualized language or imagery and unwelcome sexual attention or advances Trolling, insulting/derogatory comments, and personal or political attacks Public or private harassment Publishing others\u2019 private information, such as a physical or electronic address, without explicit permission Other conduct which could reasonably be considered inappropriate in a professional setting Our Responsibilities Project maintainers are responsible for clarifying the standards of acceptable behavior and are expected to take appropriate and fair corrective action in response to any instances of unacceptable behavior. Project maintainers have the right and responsibility to remove, edit, or reject comments, commits, code, wiki edits, issues, and other contributions that are not aligned to this Code of Conduct, or to ban temporarily or permanently any contributor for other behaviors that they deem inappropriate, threatening, offensive, or harmful. Scope This Code of Conduct applies both within project spaces and in public spaces when an individual is representing the project or its community. Examples of representing a project or community include using an official project e-mail address, posting via an official social media account, or acting as an appointed representative at an online or offline event. Representation of a project may be further defined and clarified by project maintainers. Enforcement Instances of abusive, harassing, or otherwise unacceptable behavior may be reported by contacting the project team at jguibert@gmail.com . All complaints will be reviewed and investigated and will result in a response that is deemed necessary and appropriate to the circumstances. The project team is obligated to maintain confidentiality with regard to the reporter of an incident. Further details of specific enforcement policies may be posted separately. Project maintainers who do not follow or enforce the Code of Conduct in good faith may face temporary or permanent repercussions as determined by other members of the project\u2019s leadership. Attribution This Code of Conduct is adapted from the Contributor Covenant , version 1.4, available at https://www.contributor-covenant.org/version/1/4/code-of-conduct.html For answers to common questions about this code of conduct, see https://www.contributor-covenant.org/faq","title":"Code of Conduct"},{"location":"about/code_of_conduct/#contributor-covenant-code-of-conduct","text":"","title":"Contributor Covenant Code of Conduct"},{"location":"about/code_of_conduct/#our-pledge","text":"In the interest of fostering an open and welcoming environment, we as contributors and maintainers pledge to making participation in our project and our community a harassment-free experience for everyone, regardless of age, body size, disability, ethnicity, sex characteristics, gender identity and expression, level of experience, education, socio-economic status, nationality, personal appearance, race, religion, or sexual identity and orientation.","title":"Our Pledge"},{"location":"about/code_of_conduct/#our-standards","text":"Examples of behavior that contributes to creating a positive environment include: Using welcoming and inclusive language Being respectful of differing viewpoints and experiences Gracefully accepting constructive criticism Focusing on what is best for the community Showing empathy towards other community members Examples of unacceptable behavior by participants include: The use of sexualized language or imagery and unwelcome sexual attention or advances Trolling, insulting/derogatory comments, and personal or political attacks Public or private harassment Publishing others\u2019 private information, such as a physical or electronic address, without explicit permission Other conduct which could reasonably be considered inappropriate in a professional setting","title":"Our Standards"},{"location":"about/code_of_conduct/#our-responsibilities","text":"Project maintainers are responsible for clarifying the standards of acceptable behavior and are expected to take appropriate and fair corrective action in response to any instances of unacceptable behavior. Project maintainers have the right and responsibility to remove, edit, or reject comments, commits, code, wiki edits, issues, and other contributions that are not aligned to this Code of Conduct, or to ban temporarily or permanently any contributor for other behaviors that they deem inappropriate, threatening, offensive, or harmful.","title":"Our Responsibilities"},{"location":"about/code_of_conduct/#scope","text":"This Code of Conduct applies both within project spaces and in public spaces when an individual is representing the project or its community. Examples of representing a project or community include using an official project e-mail address, posting via an official social media account, or acting as an appointed representative at an online or offline event. Representation of a project may be further defined and clarified by project maintainers.","title":"Scope"},{"location":"about/code_of_conduct/#enforcement","text":"Instances of abusive, harassing, or otherwise unacceptable behavior may be reported by contacting the project team at jguibert@gmail.com . All complaints will be reviewed and investigated and will result in a response that is deemed necessary and appropriate to the circumstances. The project team is obligated to maintain confidentiality with regard to the reporter of an incident. Further details of specific enforcement policies may be posted separately. Project maintainers who do not follow or enforce the Code of Conduct in good faith may face temporary or permanent repercussions as determined by other members of the project\u2019s leadership.","title":"Enforcement"},{"location":"about/code_of_conduct/#attribution","text":"This Code of Conduct is adapted from the Contributor Covenant , version 1.4, available at https://www.contributor-covenant.org/version/1/4/code-of-conduct.html For answers to common questions about this code of conduct, see https://www.contributor-covenant.org/faq","title":"Attribution"},{"location":"about/license/","text":"The MIT License (MIT) Copyright \u00a9 2019, Jerome Guibert Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \u201cSoftware\u201d), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \u201cAS IS\u201d, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.","title":"License"},{"location":"async_btree/analyze/","text":"analyze 1 analyze ( target : Union [ Callable [ ... , Awaitable [ Any ]], Callable ]) -> async_btree . analyze . Node Analyze specified target and return a Node representation. Parameters - target (CallableFunction) : async function to analyze Returns (Node) a defintion","title":"analyze"},{"location":"async_btree/control/","text":"async_btree.control Control function definition. sequence 1 sequence ( children : List [ Union [ Callable [ ... , Awaitable [ Any ]], Callable ]], succes_threshold : int = - 1 ) -> Callable [[], Awaitable [ Any ]] \u2018sequence\u2019 return a function which execute children in sequence. succes_threshold generalize traditional sequence/fallback. succes_threshold must be in [0, len(children)], is default value is (-1) means len(children) if success = succes_threshold, return a success if failure = len(children) - succes_threshold, return a failure What we can return as value and keep sematic Failure/Success: - an array of previous result when success - last failure when fail :param children: list of Awaitable :param succes_threshold: succes threshold value :return: an awaitable function. fallback 1 fallback ( children : List [ Union [ Callable [ ... , Awaitable [ Any ]], Callable ]]) -> Callable [[], Awaitable [ Any ]] Execute tasks in sequence and succeed if one succeed or failed if all failed. Often named \u2018selector\u2019, children can be seen as an ordered list starting from higthest priority to lowest priority. :param children: list of Awaitable :return: an awaitable function. selector 1 selector ( children : List [ Union [ Callable [ ... , Awaitable [ Any ]], Callable ]]) -> Callable [[], Awaitable [ Any ]] Synonym of fallback. decision 1 decision ( condition : Union [ Callable [ ... , Awaitable [ Any ]], Callable ], success_tree : Union [ Callable [ ... , Awaitable [ Any ]], Callable ], failure_tree : Union [ Callable [ ... , Awaitable [ Any ]], Callable , NoneType ] = None ) -> Callable [[], Awaitable [ Any ]] Create a decision node. :param condition: awaitable condition :param success_tree: awaitable success tree which be evaluated if cond is Truthy :param failure_tree: awaitable failure tree which be evaluated if cond is Falsy (None per default) :return: an awaitable function. repeat_until 1 repeat_until ( condition : Union [ Callable [ ... , Awaitable [ Any ]], Callable ], child : Union [ Callable [ ... , Awaitable [ Any ]], Callable ]) -> Callable [[], Awaitable [ Any ]] Repeat child evaluation until condition is truthy. Return last child evaluation or FAILURE if no evaluation occurs. :param condition: awaitable condition :param child: awaitable child :return: an awaitable function.","title":"control"},{"location":"async_btree/decorator/","text":"async_btree.decorator Decorator module define all decorator function node. alias 1 alias ( child : Union [ Callable [ ... , Awaitable [ Any ]], Callable ], name : str ) -> Callable [[], Awaitable [ Any ]] Define an alias on our child. :param child: child function to decorate :param name: name of function tree :return: an Awaitable function. decorate 1 decorate ( child : Union [ Callable [ ... , Awaitable [ Any ]], Callable ], decorator : Union [ Callable [ ... , Awaitable [ Any ]], Callable ], ** kwargs ) -> Callable [[], Awaitable [ Any ]] Create a decorator. Post process a child with specified decorator function. First argument of decorator function must be a child. This method implement a simple lazy evaluation. :param child: child function to decorate :param decorator: awaitable target decorator :return: an Awaitable function which return decorator evaluation against child. always_success 1 always_success ( child : Union [ Callable [ ... , Awaitable [ Any ]], Callable ]) -> Callable [[], Awaitable [ Any ]] Create a node which always return SUCCESS value. :param child: child function to decorate :return: an Awaitable function which return child result if is truthy else SUCCESS (Any exception will be ignored). always_failure 1 always_failure ( child : Union [ Callable [ ... , Awaitable [ Any ]], Callable ]) -> Callable [[], Awaitable [ Any ]] Produce a function which always return FAILURE value. :param child: child function to decorate :return: an Awaitable function which return child result if is falsy else FAILURE, or a ControlFlowException if error occurs. is_success 1 is_success ( child : Union [ Callable [ ... , Awaitable [ Any ]], Callable ]) -> Callable [[], Awaitable [ Any ]] Create a conditional node which test if child success. :param child: child function to decorate :return: an Awaitable function which return SUCCESS if child return SUCCESS else FAILURE. An exception will be evaluated as falsy. is_failure 1 is_failure ( child : Union [ Callable [ ... , Awaitable [ Any ]], Callable ]) -> Callable [[], Awaitable [ Any ]] Create a conditional node which test if child fail. :param child: child function to decorate :return: an Awaitable function which return SUCCESS if child return FAILURE else FAILURE. An exception will be evaluated as a success. inverter 1 inverter ( child : Union [ Callable [ ... , Awaitable [ Any ]], Callable ]) -> Callable [[], Awaitable [ Any ]] Invert node status. :param child: child function to decorate :return: an Awaitable function which return SUCCESS if child return FAILURE else FAILURE retry 1 retry ( child : Union [ Callable [ ... , Awaitable [ Any ]], Callable ], max_retry : int = 3 ) -> Callable [[], Awaitable [ Any ]] Retry child evaluation at most max_retry time on failure until child succeed. :param child: child function to decorate :param max_retry: max retry count (default 3), -1 mean infinite retry :return: an Awaitable function which retry child evaluation at most max_retry time on failure until child succeed. If max_retry is reached, returns FAILURE or last exception. retry_until_success 1 retry_until_success ( child : Union [ Callable [ ... , Awaitable [ Any ]], Callable ]) -> Callable [[], Awaitable [ Any ]] Retry child until success. :param child: child function to decorate :return: an Awaitable function which try to evaluate child until it succeed. retry_until_failed 1 retry_until_failed ( child : Union [ Callable [ ... , Awaitable [ Any ]], Callable ]) -> Callable [[], Awaitable [ Any ]] Retry child until failed. :param child: child function to decorate :return: an Awaitable function which try to evaluate child until it failed.","title":"decorator"},{"location":"async_btree/definition/","text":"async_btree.definition Common definition. ExceptionDecorator 1 ExceptionDecorator ( self , exception : Exception ) ExceptionDecorator exception is a decorator on a real exception. This will ensure that assert ExceptionDecorator . __bool__ == False . This permit to return exception as a \u2018FAILURE\u2019 status. NodeMetadata 1 NodeMetadata ( self , / , * args , ** kwargs ) NodeMetadata is our node definition. Attributes - name ( str ) : named operation - properties ( List [ str ] ) : a list of property name. - edges ( List [ str ] ) : a list of member name which act as edges. node_metadata 1 node_metadata ( name : Union [ str , NoneType ] = None , properties : Union [ List [ str ], NoneType ] = None , edges : Union [ List [ str ], NoneType ] = None ) \u2018node_metadata\u2019 is a function decorator which add meta information about node. We add a property on decorated function named \u2018__node_metadata\u2019. Parameters name (Optional[str]) : override name of decorated function, default is function name left striped with \u2018_\u2019 properties (Optional[List[str]]) : a list of property name ([] as default) edges (Optional[List[str]]) : a list of edges name ([\u201cchild\u201d, \u201cchildren\u201d] as default) Returns the decorator function","title":"definition"},{"location":"async_btree/leaf/","text":"async_btree.leaf Leaf definition. action 1 action ( target : Union [ Callable [ ... , Awaitable [ Any ]], Callable ], ** kwargs ) -> Callable [[], Awaitable [ Any ]] Declare an action leaf. Action is an awaitable closure of specified function. :param target: awaitable function :param kwargs: optional kwargs argument to pass on target function :return: an awaitable function. condition 1 condition ( target : Union [ Callable [ ... , Awaitable [ Any ]], Callable ], ** kwargs ) -> Callable [[], Awaitable [ Any ]] Declare a condition leaf. Condition is an awaitable closure of specified function. :param target: awaitable function which be evaluated as True/False. :param kwargs: optional kwargs argument to pass on target function :return: an awaitable function.","title":"leaf"},{"location":"async_btree/parallele/","text":"parallele 1 parallele ( children : List [ Union [ Callable [ ... , Awaitable [ Any ]], Callable ]], succes_threshold : int = - 1 ) -> Callable [[], Awaitable [ Any ]] Return an awaitable function which run children in parallele. succes_threshold generalize traditional sequence/fallback. succes_threshold must be in [0, len(children)], default value is len(children) if success = succes_threshold, return a success if failure = len(children) - succes_threshold, return a failure :param children: list of Awaitable :param succes_threshold: succes threshold value :return: an awaitable function.","title":"parallele"},{"location":"async_btree/utils/","text":"async_btree.utils Utility function. amap 1 amap ( corofunc : Callable [[ Any ], Awaitable [ ~ T ]], iterable : Union [ AsyncIterable , Iterable ]) -> AsyncGenerator [ ~ T , NoneType ] Map an async function onto an iterable or an async iterable. Parameters corofunc (Callable[[Any], Awaitable[T]]) : coroutine function iterable (Union[AsyncIterable, Iterable]) : iterable or async iterable collection which will be applied. Returns AsyncGenerator [ T ] : an async iterator of corofunc(item) Example [ i async for i in amap ( inc , afilter ( even , [ 0 , 1 , 2 , 3 , 4 ] )) ] afilter 1 afilter ( corofunc : Callable [[ Any ], Awaitable [ bool ]], iterable : Union [ AsyncIterable , Iterable ]) -> AsyncGenerator [ ~ T , NoneType ] Filter an iterable or an async iterable with an async function. Parameters corofunc (Callable[[Any], Awaitable[bool]]) : filter async function iterable (Union[AsyncIterable, Iterable]) : iterable or async iterable collection which will be applied. Returns ( AsyncGenerator [ T ] ) : an async iterator of item which satisfy corofunc(item) == True Example [ i async for i in amap ( inc , afilter ( even , [ 0 , 1 , 2 , 3 , 4 ] )) ] run 1 run ( kernel , target , * args ) Curio run with independent contextvars.","title":"utils"}]}