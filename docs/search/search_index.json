{"config":{"lang":["en"],"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Async Behaviour Tree for Python \u00b6 Versions following Semantic Versioning Overview \u00b6 What's a behavior tree ? \u00b6 Unlike a Finite State Machine, a Behaviour Tree is a tree of hierarchical nodes that controls the flow of decision and the execution of \"tasks\" or, as we will call them further, \"Actions\". -- behaviortree If your new (or not) about behavior tree, you could spend some time on this few links: Behavior trees for AI: How they work by Chris Simpson Introduction to BTs Few implementation libraries: task_behavior_engine A behavior tree based task engine written in Python pi_trees a Python/ROS library for implementing Behavior Trees pr_behavior_tree A simple python behavior tree library based on coroutines btsk Behavior Tree Starter Kit behave A behavior tree implementation in Python Why another library so ? \u00b6 SIMPLICITY When you study behavior tree implementation, reactive node, dynamic change, runtime execution, etc ... At a moment you're build more or less something that mimic an evaluator 'eval/apply' or a compilator, with a complex hierachical set of class. All complexity came with internal state management, using tree of blackboard to avoid global variable, multithreading issue, maybe few callback etc ... This break the simplicity and beauty of your initial design. What I find usefull with behavior tree: clarity of expression node tree representation possibility to reuse behavior add external measure to dynamicaly change a behavior, a first step on observable pattern... As I've used OOP for years (very long time), I will try to avoid class tree and prefer using the power of functionnal programming to obtain what I want: add metadata on a sematic construction, deal with closure, use function in parameters or in return value... And a last reason, more personal, it that i would explore python expressivity. SO HOW ? In this module, I purpose you to use the concept of coroutines, and their mecanisms to manage the execution flow. By this way: we reuse simple language idiom to manage state, parameter, etc no design constraint on action implementation most of language build block could be reused You could build expression like this: async def a_func (): \"\"\"A great function\"\"\" return \"a\" async def b_decorator ( child_value , other = \"\" ): \"\"\"A great decorator...\"\"\" return f \"b{child_value}{other}\" assert run ( decorate ( a_func , b_decorator )) == \"ba\" This expression apply b_decorator on function a_func . Note that decorate(a_func, b_decorator) is not an async function, only action, or condition are async function. Few guidelines of this implementation: In order to mimic all NodeStatus (success, failure, running), I replace this by truthy/falsy meaning of evaluation value. A special dedicated exception decorate standard exception in order to give them a Falsy meaning. Blackboard pattern, act as a manager of context variable for behavior tree. With python 3, please... simply use contextvars ! In order to be able to build a sematic tree, I've introduce a metadata tuple added on function implementation. The rest is just implementation details.. A little note: You should not use this until you're ready to think about what you're doing :) Note about 'async' framework \u00b6 As we use async function as underlaying mechanism to manage the execution flow, the standard library asyncio is pretty fine. But, (always a but somewhere isn't it...), you should read this [amazing blog post}( https://vorpus.org/blog/some-thoughts-on-asynchronous-api-design-in-a-post-asyncawait-world/ ) by Nathaniel J. Smith. And next study curio framework in deep. As curio say: Don't Use Curio if You're Allergic to Curio Personaly, after few time of testing and reading curio code, I'm pretty addict. Setup \u00b6 Requirements \u00b6 Python 3.7+ Installation \u00b6 Install this library directly into an activated virtual environment: $ pip install async-btree or add it to your Poetry project: $ poetry add async-btree Usage \u00b6 After installation, the package can imported: $ python >>> import async_btree >>> async_btree.__version__ See Api documentation License \u00b6 The MIT License (MIT) Contributing \u00b6 See Contributing TODO \u00b6 add examples publish release V1.0.0","title":"Home"},{"location":"#async-behaviour-tree-for-python","text":"Versions following Semantic Versioning","title":"Async Behaviour Tree for Python"},{"location":"#overview","text":"","title":"Overview"},{"location":"#whats-a-behavior-tree","text":"Unlike a Finite State Machine, a Behaviour Tree is a tree of hierarchical nodes that controls the flow of decision and the execution of \"tasks\" or, as we will call them further, \"Actions\". -- behaviortree If your new (or not) about behavior tree, you could spend some time on this few links: Behavior trees for AI: How they work by Chris Simpson Introduction to BTs Few implementation libraries: task_behavior_engine A behavior tree based task engine written in Python pi_trees a Python/ROS library for implementing Behavior Trees pr_behavior_tree A simple python behavior tree library based on coroutines btsk Behavior Tree Starter Kit behave A behavior tree implementation in Python","title":"What's a behavior tree ?"},{"location":"#why-another-library-so","text":"SIMPLICITY When you study behavior tree implementation, reactive node, dynamic change, runtime execution, etc ... At a moment you're build more or less something that mimic an evaluator 'eval/apply' or a compilator, with a complex hierachical set of class. All complexity came with internal state management, using tree of blackboard to avoid global variable, multithreading issue, maybe few callback etc ... This break the simplicity and beauty of your initial design. What I find usefull with behavior tree: clarity of expression node tree representation possibility to reuse behavior add external measure to dynamicaly change a behavior, a first step on observable pattern... As I've used OOP for years (very long time), I will try to avoid class tree and prefer using the power of functionnal programming to obtain what I want: add metadata on a sematic construction, deal with closure, use function in parameters or in return value... And a last reason, more personal, it that i would explore python expressivity. SO HOW ? In this module, I purpose you to use the concept of coroutines, and their mecanisms to manage the execution flow. By this way: we reuse simple language idiom to manage state, parameter, etc no design constraint on action implementation most of language build block could be reused You could build expression like this: async def a_func (): \"\"\"A great function\"\"\" return \"a\" async def b_decorator ( child_value , other = \"\" ): \"\"\"A great decorator...\"\"\" return f \"b{child_value}{other}\" assert run ( decorate ( a_func , b_decorator )) == \"ba\" This expression apply b_decorator on function a_func . Note that decorate(a_func, b_decorator) is not an async function, only action, or condition are async function. Few guidelines of this implementation: In order to mimic all NodeStatus (success, failure, running), I replace this by truthy/falsy meaning of evaluation value. A special dedicated exception decorate standard exception in order to give them a Falsy meaning. Blackboard pattern, act as a manager of context variable for behavior tree. With python 3, please... simply use contextvars ! In order to be able to build a sematic tree, I've introduce a metadata tuple added on function implementation. The rest is just implementation details.. A little note: You should not use this until you're ready to think about what you're doing :)","title":"Why another library so ?"},{"location":"#note-about-async-framework","text":"As we use async function as underlaying mechanism to manage the execution flow, the standard library asyncio is pretty fine. But, (always a but somewhere isn't it...), you should read this [amazing blog post}( https://vorpus.org/blog/some-thoughts-on-asynchronous-api-design-in-a-post-asyncawait-world/ ) by Nathaniel J. Smith. And next study curio framework in deep. As curio say: Don't Use Curio if You're Allergic to Curio Personaly, after few time of testing and reading curio code, I'm pretty addict.","title":"Note about 'async' framework"},{"location":"#setup","text":"","title":"Setup"},{"location":"#requirements","text":"Python 3.7+","title":"Requirements"},{"location":"#installation","text":"Install this library directly into an activated virtual environment: $ pip install async-btree or add it to your Poetry project: $ poetry add async-btree","title":"Installation"},{"location":"#usage","text":"After installation, the package can imported: $ python >>> import async_btree >>> async_btree.__version__ See Api documentation","title":"Usage"},{"location":"#license","text":"The MIT License (MIT)","title":"License"},{"location":"#contributing","text":"See Contributing","title":"Contributing"},{"location":"#todo","text":"add examples publish release V1.0.0","title":"TODO"},{"location":"api-overview/","text":"API Overview \u00b6 We define several packages: definition : common model definition leaf : leaf node implementation decorator : decorator node implementation control : control node implementation parallele : a specific parallele node implementation with curio analyze : analyze function to dynamically analyze behaviour tree utils : few async function implementation to hide complexity","title":"overview"},{"location":"api-overview/#api-overview","text":"We define several packages: definition : common model definition leaf : leaf node implementation decorator : decorator node implementation control : control node implementation parallele : a specific parallele node implementation with curio analyze : analyze function to dynamically analyze behaviour tree utils : few async function implementation to hide complexity","title":"API Overview"},{"location":"changelog/","text":"1.0.0 (2019-08-28) \u00b6 rework documentation build process (see mkdocs folder) configure github page under master/docs configure documentation site on pypi add doc style on all function standardize parameter name fix dev documentation dependency 0.1.2 (2019-07-05) \u00b6 Stable version flag Remove alpha note 0.1.1 (2019-07-05) \u00b6 Removed version due to configuration error. 0.1.0 (2019-07-05) \u00b6 Added Project Management: initial project structure based on jacebrowning/template-python initial project configuration follow Semantic Versioning configure travis-ci publish alpha version (not functional) on pypi configure coverage configure scrutinizer remove pylint.ini to a simple .pylintrc (add ide support) disable pylint bad-continuation (bug with pep8 formater) declare extra dependency configure black and isort refactorise makefile poetry run introduce flake8 as linter Documentation: replace mkdocs with pydoc-markdown Code: define 'definition' module to declare all common definiton of btree define 'utils' module to declare few async function like afilter, amap fix flake8 syntax error fix mypy typing error add basic test unit fix typing declaration complete code coverage","title":"Release Notes"},{"location":"changelog/#100-2019-08-28","text":"rework documentation build process (see mkdocs folder) configure github page under master/docs configure documentation site on pypi add doc style on all function standardize parameter name fix dev documentation dependency","title":"1.0.0 (2019-08-28)"},{"location":"changelog/#012-2019-07-05","text":"Stable version flag Remove alpha note","title":"0.1.2 (2019-07-05)"},{"location":"changelog/#011-2019-07-05","text":"Removed version due to configuration error.","title":"0.1.1 (2019-07-05)"},{"location":"changelog/#010-2019-07-05","text":"Added Project Management: initial project structure based on jacebrowning/template-python initial project configuration follow Semantic Versioning configure travis-ci publish alpha version (not functional) on pypi configure coverage configure scrutinizer remove pylint.ini to a simple .pylintrc (add ide support) disable pylint bad-continuation (bug with pep8 formater) declare extra dependency configure black and isort refactorise makefile poetry run introduce flake8 as linter Documentation: replace mkdocs with pydoc-markdown Code: define 'definition' module to declare all common definiton of btree define 'utils' module to declare few async function like afilter, amap fix flake8 syntax error fix mypy typing error add basic test unit fix typing declaration complete code coverage","title":"0.1.0 (2019-07-05)"},{"location":"code_of_conduct/","text":"Contributor Covenant Code of Conduct \u00b6 Our Pledge \u00b6 In the interest of fostering an open and welcoming environment, we as contributors and maintainers pledge to making participation in our project and our community a harassment-free experience for everyone, regardless of age, body size, disability, ethnicity, sex characteristics, gender identity and expression, level of experience, education, socio-economic status, nationality, personal appearance, race, religion, or sexual identity and orientation. Our Standards \u00b6 Examples of behavior that contributes to creating a positive environment include: Using welcoming and inclusive language Being respectful of differing viewpoints and experiences Gracefully accepting constructive criticism Focusing on what is best for the community Showing empathy towards other community members Examples of unacceptable behavior by participants include: The use of sexualized language or imagery and unwelcome sexual attention or advances Trolling, insulting/derogatory comments, and personal or political attacks Public or private harassment Publishing others' private information, such as a physical or electronic address, without explicit permission Other conduct which could reasonably be considered inappropriate in a professional setting Our Responsibilities \u00b6 Project maintainers are responsible for clarifying the standards of acceptable behavior and are expected to take appropriate and fair corrective action in response to any instances of unacceptable behavior. Project maintainers have the right and responsibility to remove, edit, or reject comments, commits, code, wiki edits, issues, and other contributions that are not aligned to this Code of Conduct, or to ban temporarily or permanently any contributor for other behaviors that they deem inappropriate, threatening, offensive, or harmful. Scope \u00b6 This Code of Conduct applies both within project spaces and in public spaces when an individual is representing the project or its community. Examples of representing a project or community include using an official project e-mail address, posting via an official social media account, or acting as an appointed representative at an online or offline event. Representation of a project may be further defined and clarified by project maintainers. Enforcement \u00b6 Instances of abusive, harassing, or otherwise unacceptable behavior may be reported by contacting the project team at jguibert@gmail.com . All complaints will be reviewed and investigated and will result in a response that is deemed necessary and appropriate to the circumstances. The project team is obligated to maintain confidentiality with regard to the reporter of an incident. Further details of specific enforcement policies may be posted separately. Project maintainers who do not follow or enforce the Code of Conduct in good faith may face temporary or permanent repercussions as determined by other members of the project's leadership. Attribution \u00b6 This Code of Conduct is adapted from the Contributor Covenant , version 1.4, available at https://www.contributor-covenant.org/version/1/4/code-of-conduct.html For answers to common questions about this code of conduct, see https://www.contributor-covenant.org/faq","title":"Code of Conduct"},{"location":"code_of_conduct/#contributor-covenant-code-of-conduct","text":"","title":"Contributor Covenant Code of Conduct"},{"location":"code_of_conduct/#our-pledge","text":"In the interest of fostering an open and welcoming environment, we as contributors and maintainers pledge to making participation in our project and our community a harassment-free experience for everyone, regardless of age, body size, disability, ethnicity, sex characteristics, gender identity and expression, level of experience, education, socio-economic status, nationality, personal appearance, race, religion, or sexual identity and orientation.","title":"Our Pledge"},{"location":"code_of_conduct/#our-standards","text":"Examples of behavior that contributes to creating a positive environment include: Using welcoming and inclusive language Being respectful of differing viewpoints and experiences Gracefully accepting constructive criticism Focusing on what is best for the community Showing empathy towards other community members Examples of unacceptable behavior by participants include: The use of sexualized language or imagery and unwelcome sexual attention or advances Trolling, insulting/derogatory comments, and personal or political attacks Public or private harassment Publishing others' private information, such as a physical or electronic address, without explicit permission Other conduct which could reasonably be considered inappropriate in a professional setting","title":"Our Standards"},{"location":"code_of_conduct/#our-responsibilities","text":"Project maintainers are responsible for clarifying the standards of acceptable behavior and are expected to take appropriate and fair corrective action in response to any instances of unacceptable behavior. Project maintainers have the right and responsibility to remove, edit, or reject comments, commits, code, wiki edits, issues, and other contributions that are not aligned to this Code of Conduct, or to ban temporarily or permanently any contributor for other behaviors that they deem inappropriate, threatening, offensive, or harmful.","title":"Our Responsibilities"},{"location":"code_of_conduct/#scope","text":"This Code of Conduct applies both within project spaces and in public spaces when an individual is representing the project or its community. Examples of representing a project or community include using an official project e-mail address, posting via an official social media account, or acting as an appointed representative at an online or offline event. Representation of a project may be further defined and clarified by project maintainers.","title":"Scope"},{"location":"code_of_conduct/#enforcement","text":"Instances of abusive, harassing, or otherwise unacceptable behavior may be reported by contacting the project team at jguibert@gmail.com . All complaints will be reviewed and investigated and will result in a response that is deemed necessary and appropriate to the circumstances. The project team is obligated to maintain confidentiality with regard to the reporter of an incident. Further details of specific enforcement policies may be posted separately. Project maintainers who do not follow or enforce the Code of Conduct in good faith may face temporary or permanent repercussions as determined by other members of the project's leadership.","title":"Enforcement"},{"location":"code_of_conduct/#attribution","text":"This Code of Conduct is adapted from the Contributor Covenant , version 1.4, available at https://www.contributor-covenant.org/version/1/4/code-of-conduct.html For answers to common questions about this code of conduct, see https://www.contributor-covenant.org/faq","title":"Attribution"},{"location":"contributing/","text":"Contributing \u00b6 This project is based on Jace's Python Template and heevly customized... This is a cookiecutter template for a typical Python library following modern packaging conventions. It utilizes popular libraries alongside Make and Graphviz to fully automate all development and deployment tasks. My main requirement was to find something wich use Poetry project to manage python dependencies. Other template exist like Cookiecutter PyPackage , maybe a next time ? Setup \u00b6 Requirements \u00b6 Make: macOS: $ xcode-select --install Linux: https://www.gnu.org/software/make Windows: https://mingw.org/download/installer Pyenv: https://github.com/pyenv/pyenv#installation Python: $ pyenv install 3.7.3 Note for MacOS 10.14 user : SDKROOT = /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX10.14.sdk MACOSX_DEPLOYMENT_TARGET = 10 .14 pyenv install 3 .7.3 * Poetry: https://poetry.eustace.io/docs/#installation Note: poetry config settings.virtualenvs.path \" ${ HOME } /.virtualenvs\" * Graphviz: * macOS: $ brew install graphviz * Linux: https://graphviz.org/download * Windows: https://graphviz.org/download To confirm these system dependencies are configured correctly: $ make doctor Installation \u00b6 Install project dependencies into a virtual environment: $ make install Development Tasks \u00b6 Manual \u00b6 Run the tests: $ make test Run static analysis: $ make check Build the documentation: $ make docs Automatic \u00b6 Keep all of the above tasks running on change: $ make watch In order to have OS X notifications, brew install terminal-notifier . Continuous Integration \u00b6 The CI server will report overall build status: $ make ci Release Tasks \u00b6 Release to PyPI: $ make upload","title":"Contributing"},{"location":"contributing/#contributing","text":"This project is based on Jace's Python Template and heevly customized... This is a cookiecutter template for a typical Python library following modern packaging conventions. It utilizes popular libraries alongside Make and Graphviz to fully automate all development and deployment tasks. My main requirement was to find something wich use Poetry project to manage python dependencies. Other template exist like Cookiecutter PyPackage , maybe a next time ?","title":"Contributing"},{"location":"contributing/#setup","text":"","title":"Setup"},{"location":"contributing/#requirements","text":"Make: macOS: $ xcode-select --install Linux: https://www.gnu.org/software/make Windows: https://mingw.org/download/installer Pyenv: https://github.com/pyenv/pyenv#installation Python: $ pyenv install 3.7.3 Note for MacOS 10.14 user : SDKROOT = /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX10.14.sdk MACOSX_DEPLOYMENT_TARGET = 10 .14 pyenv install 3 .7.3 * Poetry: https://poetry.eustace.io/docs/#installation Note: poetry config settings.virtualenvs.path \" ${ HOME } /.virtualenvs\" * Graphviz: * macOS: $ brew install graphviz * Linux: https://graphviz.org/download * Windows: https://graphviz.org/download To confirm these system dependencies are configured correctly: $ make doctor","title":"Requirements"},{"location":"contributing/#installation","text":"Install project dependencies into a virtual environment: $ make install","title":"Installation"},{"location":"contributing/#development-tasks","text":"","title":"Development Tasks"},{"location":"contributing/#manual","text":"Run the tests: $ make test Run static analysis: $ make check Build the documentation: $ make docs","title":"Manual"},{"location":"contributing/#automatic","text":"Keep all of the above tasks running on change: $ make watch In order to have OS X notifications, brew install terminal-notifier .","title":"Automatic"},{"location":"contributing/#continuous-integration","text":"The CI server will report overall build status: $ make ci","title":"Continuous Integration"},{"location":"contributing/#release-tasks","text":"Release to PyPI: $ make upload","title":"Release Tasks"},{"location":"documentation/","text":"Documentation \u00b6 Note on documentation generation. Tooling \u00b6 mkdocs to generate web site pydocmd (based on mkdocs) to generate API doc from docstyle pyreverse to generate uml diagram Documentation folder \u00b6 under mkdocs folder: 'docs' which keep handle writed doc file, 'docs/api' api generated files folder 'docs/uml' uml gererated diagrams folder 'mkdocs.yaml': configuration file for mkdocs tool Makefile targets \u00b6 Main target: 'docs' call 'mkdocs-github-page' call 'mkdocs-site': call 'mkdocs-uml': Generate UML Diagram call 'mkdocs-api': Generate API documentation call 'mkdocs-md': Copy standard document Build web site with mkdocs tool move generated website content into '/docs' folder in order to expose with guthub page project call '.clean-docs' (Remove all temp files) Extract from Makefile \u00b6 DOCS_PATH = \"mkdocs/docs\" mkdocs-uml: # Generate UML Diagram @mkdir -p $(DOCS_PATH)/uml @$(RUN) pyreverse $(PACKAGE) -p $(PACKAGE) -a 1 -f ALL -o png --ignore tests - mv -f classes_$(PACKAGE).png $(DOCS_PATH)/uml/classes.png - mv -f packages_$(PACKAGE).png $(DOCS_PATH)/uml/packages.png mkdocs-api: # Generate API documentation @mkdir -p $(DOCS_PATH)/api @cd $(DOCS_PATH)/api && \\ $(RUN) pydocmd simple async_btree.definition+ > definition.md && \\ $(RUN) pydocmd simple async_btree.analyze async_btree.stringify_analyze async_btree.Node > analyze.md && \\ $(RUN) pydocmd simple async_btree.analyze async_btree.control+ > control.md && \\ $(RUN) pydocmd simple async_btree.analyze async_btree.decorator+ > decorator.md && \\ $(RUN) pydocmd simple async_btree.analyze async_btree.leaf+ > leaf.md && \\ $(RUN) pydocmd simple async_btree.analyze async_btree.parallele+ > parallele.md && \\ $(RUN) pydocmd simple async_btree.analyze async_btree.utils+ > utils.md mkdocs-md: # Copy standard document @cp -f README.md $(DOCS_PATH)/index.md @cp -f LICENSE.md $(DOCS_PATH)/license.md @cp -f CHANGELOG.md $(DOCS_PATH)/changelog.md @cp -f CODE_OF_CONDUCT.md $(DOCS_PATH)/code_of_conduct.md mkdocs-site: mkdocs-uml mkdocs-api mkdocs-md # Build Documentation Site @cd mkdocs && $(RUN) mkdocs build mkdocs-github-page: mkdocs-site # Move generated docs under /docs @rm -rf docs/ @mv mkdocs/site docs/ .clean-docs: # remove all generated files @rm -rf mkdocs/site @rm -rf $(DOCS_PATH)/uml @rm -rf $(DOCS_PATH)/api @rm -rf $(DOCS_PATH)/index.md @rm -rf $(DOCS_PATH)/license.md @rm -rf $(DOCS_PATH)/changelog.md @rm -rf $(DOCS_PATH)/code_of_conduct.md .PHONY: docs docs: mkdocs-github-page .clean-docs ## Generate documentation and UML","title":"Documentation"},{"location":"documentation/#documentation","text":"Note on documentation generation.","title":"Documentation"},{"location":"documentation/#tooling","text":"mkdocs to generate web site pydocmd (based on mkdocs) to generate API doc from docstyle pyreverse to generate uml diagram","title":"Tooling"},{"location":"documentation/#documentation-folder","text":"under mkdocs folder: 'docs' which keep handle writed doc file, 'docs/api' api generated files folder 'docs/uml' uml gererated diagrams folder 'mkdocs.yaml': configuration file for mkdocs tool","title":"Documentation folder"},{"location":"documentation/#makefile-targets","text":"Main target: 'docs' call 'mkdocs-github-page' call 'mkdocs-site': call 'mkdocs-uml': Generate UML Diagram call 'mkdocs-api': Generate API documentation call 'mkdocs-md': Copy standard document Build web site with mkdocs tool move generated website content into '/docs' folder in order to expose with guthub page project call '.clean-docs' (Remove all temp files)","title":"Makefile targets"},{"location":"documentation/#extract-from-makefile","text":"DOCS_PATH = \"mkdocs/docs\" mkdocs-uml: # Generate UML Diagram @mkdir -p $(DOCS_PATH)/uml @$(RUN) pyreverse $(PACKAGE) -p $(PACKAGE) -a 1 -f ALL -o png --ignore tests - mv -f classes_$(PACKAGE).png $(DOCS_PATH)/uml/classes.png - mv -f packages_$(PACKAGE).png $(DOCS_PATH)/uml/packages.png mkdocs-api: # Generate API documentation @mkdir -p $(DOCS_PATH)/api @cd $(DOCS_PATH)/api && \\ $(RUN) pydocmd simple async_btree.definition+ > definition.md && \\ $(RUN) pydocmd simple async_btree.analyze async_btree.stringify_analyze async_btree.Node > analyze.md && \\ $(RUN) pydocmd simple async_btree.analyze async_btree.control+ > control.md && \\ $(RUN) pydocmd simple async_btree.analyze async_btree.decorator+ > decorator.md && \\ $(RUN) pydocmd simple async_btree.analyze async_btree.leaf+ > leaf.md && \\ $(RUN) pydocmd simple async_btree.analyze async_btree.parallele+ > parallele.md && \\ $(RUN) pydocmd simple async_btree.analyze async_btree.utils+ > utils.md mkdocs-md: # Copy standard document @cp -f README.md $(DOCS_PATH)/index.md @cp -f LICENSE.md $(DOCS_PATH)/license.md @cp -f CHANGELOG.md $(DOCS_PATH)/changelog.md @cp -f CODE_OF_CONDUCT.md $(DOCS_PATH)/code_of_conduct.md mkdocs-site: mkdocs-uml mkdocs-api mkdocs-md # Build Documentation Site @cd mkdocs && $(RUN) mkdocs build mkdocs-github-page: mkdocs-site # Move generated docs under /docs @rm -rf docs/ @mv mkdocs/site docs/ .clean-docs: # remove all generated files @rm -rf mkdocs/site @rm -rf $(DOCS_PATH)/uml @rm -rf $(DOCS_PATH)/api @rm -rf $(DOCS_PATH)/index.md @rm -rf $(DOCS_PATH)/license.md @rm -rf $(DOCS_PATH)/changelog.md @rm -rf $(DOCS_PATH)/code_of_conduct.md .PHONY: docs docs: mkdocs-github-page .clean-docs ## Generate documentation and UML","title":"Extract from Makefile"},{"location":"license/","text":"The MIT License (MIT) Copyright \u00a9 2019, Jerome Guibert Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.","title":"License"},{"location":"api/analyze/","text":"analyze \u00b6 analyze ( target : Union [ Callable [ ... , Awaitable [ Any ]], Callable ]) -> async_btree . analyze . Node Analyze specified target and return a Node representation. Parameters target (CallableFunction) : async function to analyze Returns (Node) : a node instance representation of target function stringify_analyze \u00b6 stringify_analyze ( target : async_btree . analyze . Node , indent : int = 0 , label : Union [ str , NoneType ] = None ) -> str Stringify node representation of specified target. Parameters target (CallableFunction) : async function to analyze indent (int) : level identation (default to zero) label (Optional[str]) : label of current node (default None) Returns (str) : a string node representation Node \u00b6 Node ( self , / , * args , ** kwargs ) Node aggregate node definition implemented with NamedTuple. A Node is used to keep information on name, properties, and relations ship between a hierachical construct of functions. It's like an instance of NodeMetadata. Attributes name (str) : named operation properties (List[Tuple[str, Any]]) : a list of tuple (name, value) for definition. edges (List[Tuple[str, List[Any]]]) : a list of tuple (name, node list) for definition. Notes Edges attribut should be edges: List[Tuple[str, List['Node']]] But it is impossible for now, see mypy issues 731","title":"analyze"},{"location":"api/analyze/#analyze","text":"analyze ( target : Union [ Callable [ ... , Awaitable [ Any ]], Callable ]) -> async_btree . analyze . Node Analyze specified target and return a Node representation. Parameters target (CallableFunction) : async function to analyze Returns (Node) : a node instance representation of target function","title":"analyze"},{"location":"api/analyze/#stringify_analyze","text":"stringify_analyze ( target : async_btree . analyze . Node , indent : int = 0 , label : Union [ str , NoneType ] = None ) -> str Stringify node representation of specified target. Parameters target (CallableFunction) : async function to analyze indent (int) : level identation (default to zero) label (Optional[str]) : label of current node (default None) Returns (str) : a string node representation","title":"stringify_analyze"},{"location":"api/analyze/#node","text":"Node ( self , / , * args , ** kwargs ) Node aggregate node definition implemented with NamedTuple. A Node is used to keep information on name, properties, and relations ship between a hierachical construct of functions. It's like an instance of NodeMetadata. Attributes name (str) : named operation properties (List[Tuple[str, Any]]) : a list of tuple (name, value) for definition. edges (List[Tuple[str, List[Any]]]) : a list of tuple (name, node list) for definition. Notes Edges attribut should be edges: List[Tuple[str, List['Node']]] But it is impossible for now, see mypy issues 731","title":"Node"},{"location":"api/control/","text":"async_btree.control \u00b6 Control function definition. sequence \u00b6 sequence ( children : List [ Union [ Callable [ ... , Awaitable [ Any ]], Callable ]], succes_threshold : int = - 1 ) -> Callable [[], Awaitable [ Any ]] Return a function which execute children in sequence. succes_threshold parameter generalize traditional sequence/fallback and must be in [0, len(children)]. Default value is (-1) means len(children) if success = succes_threshold, return a success if failure = len(children) - succes_threshold, return a failure What we can return as value and keep sematic Failure/Success: - an array of previous result when success - last failure when fail Parameters children (List[CallableFunction]) : list of Awaitable succes_threshold (int) : succes threshold value Returns (AsyncInnerFunction) : an awaitable function. Exceptions AssertionError if succes_threshold is invalid fallback \u00b6 fallback ( children : List [ Union [ Callable [ ... , Awaitable [ Any ]], Callable ]]) -> Callable [[], Awaitable [ Any ]] Execute tasks in sequence and succeed if one succeed or failed if all failed. Often named 'selector', children can be seen as an ordered list starting from higthest priority to lowest priority. Parameters children (List[CallableFunction]) : list of Awaitable Returns (AsyncInnerFunction) : an awaitable function. selector \u00b6 selector ( children : List [ Union [ Callable [ ... , Awaitable [ Any ]], Callable ]]) -> Callable [[], Awaitable [ Any ]] Synonym of fallback. decision \u00b6 decision ( condition : Union [ Callable [ ... , Awaitable [ Any ]], Callable ], success_tree : Union [ Callable [ ... , Awaitable [ Any ]], Callable ], failure_tree : Union [ Callable [ ... , Awaitable [ Any ]], Callable , NoneType ] = None ) -> Callable [[], Awaitable [ Any ]] Create a decision node. Parameters condition (CallableFunction) : awaitable condition success_tree (CallableFunction) : awaitable success tree which be evaluated if cond is Truthy failure_tree (CallableFunction) : awaitable failure tree which be evaluated if cond is Falsy (None per default) Returns (AsyncInnerFunction) : an awaitable function. repeat_until \u00b6 repeat_until ( condition : Union [ Callable [ ... , Awaitable [ Any ]], Callable ], child : Union [ Callable [ ... , Awaitable [ Any ]], Callable ]) -> Callable [[], Awaitable [ Any ]] Repeat child evaluation until condition is truthy. Return last child evaluation or FAILURE if no evaluation occurs. Parameters condition (CallableFunction) : awaitable condition child (CallableFunction) : awaitable child Returns (AsyncInnerFunction) : an awaitable function.","title":"control"},{"location":"api/control/#async_btreecontrol","text":"Control function definition.","title":"async_btree.control"},{"location":"api/control/#sequence","text":"sequence ( children : List [ Union [ Callable [ ... , Awaitable [ Any ]], Callable ]], succes_threshold : int = - 1 ) -> Callable [[], Awaitable [ Any ]] Return a function which execute children in sequence. succes_threshold parameter generalize traditional sequence/fallback and must be in [0, len(children)]. Default value is (-1) means len(children) if success = succes_threshold, return a success if failure = len(children) - succes_threshold, return a failure What we can return as value and keep sematic Failure/Success: - an array of previous result when success - last failure when fail Parameters children (List[CallableFunction]) : list of Awaitable succes_threshold (int) : succes threshold value Returns (AsyncInnerFunction) : an awaitable function. Exceptions AssertionError if succes_threshold is invalid","title":"sequence"},{"location":"api/control/#fallback","text":"fallback ( children : List [ Union [ Callable [ ... , Awaitable [ Any ]], Callable ]]) -> Callable [[], Awaitable [ Any ]] Execute tasks in sequence and succeed if one succeed or failed if all failed. Often named 'selector', children can be seen as an ordered list starting from higthest priority to lowest priority. Parameters children (List[CallableFunction]) : list of Awaitable Returns (AsyncInnerFunction) : an awaitable function.","title":"fallback"},{"location":"api/control/#selector","text":"selector ( children : List [ Union [ Callable [ ... , Awaitable [ Any ]], Callable ]]) -> Callable [[], Awaitable [ Any ]] Synonym of fallback.","title":"selector"},{"location":"api/control/#decision","text":"decision ( condition : Union [ Callable [ ... , Awaitable [ Any ]], Callable ], success_tree : Union [ Callable [ ... , Awaitable [ Any ]], Callable ], failure_tree : Union [ Callable [ ... , Awaitable [ Any ]], Callable , NoneType ] = None ) -> Callable [[], Awaitable [ Any ]] Create a decision node. Parameters condition (CallableFunction) : awaitable condition success_tree (CallableFunction) : awaitable success tree which be evaluated if cond is Truthy failure_tree (CallableFunction) : awaitable failure tree which be evaluated if cond is Falsy (None per default) Returns (AsyncInnerFunction) : an awaitable function.","title":"decision"},{"location":"api/control/#repeat_until","text":"repeat_until ( condition : Union [ Callable [ ... , Awaitable [ Any ]], Callable ], child : Union [ Callable [ ... , Awaitable [ Any ]], Callable ]) -> Callable [[], Awaitable [ Any ]] Repeat child evaluation until condition is truthy. Return last child evaluation or FAILURE if no evaluation occurs. Parameters condition (CallableFunction) : awaitable condition child (CallableFunction) : awaitable child Returns (AsyncInnerFunction) : an awaitable function.","title":"repeat_until"},{"location":"api/decorator/","text":"async_btree.decorator \u00b6 Decorator module define all decorator function node. alias \u00b6 alias ( child : Union [ Callable [ ... , Awaitable [ Any ]], Callable ], name : str ) -> Callable [[], Awaitable [ Any ]] Define an alias on our child. Parameters child (CallableFunction) : child function to decorate name (str) : name of function tree Returns (AsyncInnerFunction) : an awaitable function. decorate \u00b6 decorate ( child : Union [ Callable [ ... , Awaitable [ Any ]], Callable ], decorator : Union [ Callable [ ... , Awaitable [ Any ]], Callable ], ** kwargs ) -> Callable [[], Awaitable [ Any ]] Create a decorator. Post process a child with specified decorator function. First argument of decorator function must be a child. This method implement a simple lazy evaluation. Parameters child (CallableFunction) : child function to decorate decorator (CallableFunction) : awaitable target decorator kwargs : optional keyed argument to pass to decorator function Returns (AsyncInnerFunction) : an awaitable function which return decorator evaluation against child. always_success \u00b6 always_success ( child : Union [ Callable [ ... , Awaitable [ Any ]], Callable ]) -> Callable [[], Awaitable [ Any ]] Create a node which always return SUCCESS value. Parameters child (CallableFunction) : child function to decorate Returns (AsyncInnerFunction) : an awaitable function which return child result if is truthy else SUCCESS (Any exception will be ignored). always_failure \u00b6 always_failure ( child : Union [ Callable [ ... , Awaitable [ Any ]], Callable ]) -> Callable [[], Awaitable [ Any ]] Produce a function which always return FAILURE value. Parameters child (CallableFunction) : child function to decorate Returns (AsyncInnerFunction) : an awaitable function which return child result if is falsy else FAILURE, or a ControlFlowException if error occurs. is_success \u00b6 is_success ( child : Union [ Callable [ ... , Awaitable [ Any ]], Callable ]) -> Callable [[], Awaitable [ Any ]] Create a conditional node which test if child success. Parameters child (CallableFunction) : child function to decorate Returns (AsyncInnerFunction) : an awaitable function which return SUCCESS if child return SUCCESS else FAILURE. An exception will be evaluated as falsy. is_failure \u00b6 is_failure ( child : Union [ Callable [ ... , Awaitable [ Any ]], Callable ]) -> Callable [[], Awaitable [ Any ]] Create a conditional node which test if child fail. Parameters child (CallableFunction) : child function to decorate Returns (AsyncInnerFunction) : an awaitable function which return SUCCESS if child return FAILURE else FAILURE. An exception will be evaluated as a success. inverter \u00b6 inverter ( child : Union [ Callable [ ... , Awaitable [ Any ]], Callable ]) -> Callable [[], Awaitable [ Any ]] Invert node status. Parameters child (CallableFunction) : child function to decorate Returns (AsyncInnerFunction) : an awaitable function which return SUCCESS if child return FAILURE else SUCCESS retry \u00b6 retry ( child : Union [ Callable [ ... , Awaitable [ Any ]], Callable ], max_retry : int = 3 ) -> Callable [[], Awaitable [ Any ]] Retry child evaluation at most max_retry time on failure until child succeed. Parameters child (CallableFunction) : child function to decorate max_retry (int) : max retry count (default 3), -1 mean infinite retry Returns (AsyncInnerFunction) : an awaitable function which retry child evaluation at most max_retry time on failure until child succeed. If max_retry is reached, returns FAILURE or last exception. retry_until_success \u00b6 retry_until_success ( child : Union [ Callable [ ... , Awaitable [ Any ]], Callable ]) -> Callable [[], Awaitable [ Any ]] Retry child until success. Parameters child (CallableFunction) : child function to decorate Returns (AsyncInnerFunction) : an awaitable function which try to evaluate child until it succeed. retry_until_failed \u00b6 retry_until_failed ( child : Union [ Callable [ ... , Awaitable [ Any ]], Callable ]) -> Callable [[], Awaitable [ Any ]] Retry child until failed. Parameters child (CallableFunction) : child function to decorate Returns (AsyncInnerFunction) : an awaitable function which try to evaluate child until it failed.","title":"decorator"},{"location":"api/decorator/#async_btreedecorator","text":"Decorator module define all decorator function node.","title":"async_btree.decorator"},{"location":"api/decorator/#alias","text":"alias ( child : Union [ Callable [ ... , Awaitable [ Any ]], Callable ], name : str ) -> Callable [[], Awaitable [ Any ]] Define an alias on our child. Parameters child (CallableFunction) : child function to decorate name (str) : name of function tree Returns (AsyncInnerFunction) : an awaitable function.","title":"alias"},{"location":"api/decorator/#decorate","text":"decorate ( child : Union [ Callable [ ... , Awaitable [ Any ]], Callable ], decorator : Union [ Callable [ ... , Awaitable [ Any ]], Callable ], ** kwargs ) -> Callable [[], Awaitable [ Any ]] Create a decorator. Post process a child with specified decorator function. First argument of decorator function must be a child. This method implement a simple lazy evaluation. Parameters child (CallableFunction) : child function to decorate decorator (CallableFunction) : awaitable target decorator kwargs : optional keyed argument to pass to decorator function Returns (AsyncInnerFunction) : an awaitable function which return decorator evaluation against child.","title":"decorate"},{"location":"api/decorator/#always_success","text":"always_success ( child : Union [ Callable [ ... , Awaitable [ Any ]], Callable ]) -> Callable [[], Awaitable [ Any ]] Create a node which always return SUCCESS value. Parameters child (CallableFunction) : child function to decorate Returns (AsyncInnerFunction) : an awaitable function which return child result if is truthy else SUCCESS (Any exception will be ignored).","title":"always_success"},{"location":"api/decorator/#always_failure","text":"always_failure ( child : Union [ Callable [ ... , Awaitable [ Any ]], Callable ]) -> Callable [[], Awaitable [ Any ]] Produce a function which always return FAILURE value. Parameters child (CallableFunction) : child function to decorate Returns (AsyncInnerFunction) : an awaitable function which return child result if is falsy else FAILURE, or a ControlFlowException if error occurs.","title":"always_failure"},{"location":"api/decorator/#is_success","text":"is_success ( child : Union [ Callable [ ... , Awaitable [ Any ]], Callable ]) -> Callable [[], Awaitable [ Any ]] Create a conditional node which test if child success. Parameters child (CallableFunction) : child function to decorate Returns (AsyncInnerFunction) : an awaitable function which return SUCCESS if child return SUCCESS else FAILURE. An exception will be evaluated as falsy.","title":"is_success"},{"location":"api/decorator/#is_failure","text":"is_failure ( child : Union [ Callable [ ... , Awaitable [ Any ]], Callable ]) -> Callable [[], Awaitable [ Any ]] Create a conditional node which test if child fail. Parameters child (CallableFunction) : child function to decorate Returns (AsyncInnerFunction) : an awaitable function which return SUCCESS if child return FAILURE else FAILURE. An exception will be evaluated as a success.","title":"is_failure"},{"location":"api/decorator/#inverter","text":"inverter ( child : Union [ Callable [ ... , Awaitable [ Any ]], Callable ]) -> Callable [[], Awaitable [ Any ]] Invert node status. Parameters child (CallableFunction) : child function to decorate Returns (AsyncInnerFunction) : an awaitable function which return SUCCESS if child return FAILURE else SUCCESS","title":"inverter"},{"location":"api/decorator/#retry","text":"retry ( child : Union [ Callable [ ... , Awaitable [ Any ]], Callable ], max_retry : int = 3 ) -> Callable [[], Awaitable [ Any ]] Retry child evaluation at most max_retry time on failure until child succeed. Parameters child (CallableFunction) : child function to decorate max_retry (int) : max retry count (default 3), -1 mean infinite retry Returns (AsyncInnerFunction) : an awaitable function which retry child evaluation at most max_retry time on failure until child succeed. If max_retry is reached, returns FAILURE or last exception.","title":"retry"},{"location":"api/decorator/#retry_until_success","text":"retry_until_success ( child : Union [ Callable [ ... , Awaitable [ Any ]], Callable ]) -> Callable [[], Awaitable [ Any ]] Retry child until success. Parameters child (CallableFunction) : child function to decorate Returns (AsyncInnerFunction) : an awaitable function which try to evaluate child until it succeed.","title":"retry_until_success"},{"location":"api/decorator/#retry_until_failed","text":"retry_until_failed ( child : Union [ Callable [ ... , Awaitable [ Any ]], Callable ]) -> Callable [[], Awaitable [ Any ]] Retry child until failed. Parameters child (CallableFunction) : child function to decorate Returns (AsyncInnerFunction) : an awaitable function which try to evaluate child until it failed.","title":"retry_until_failed"},{"location":"api/definition/","text":"async_btree.definition \u00b6 Common definition. CallableFunction Type \u00b6 Specify something callable with or without async: CallableFunction = Union[Callable[..., Awaitable[Any]], Callable] AsyncInnerFunction Type \u00b6 Function signature of async function implementation: AsyncInnerFunction = Callable[[], Awaitable[Any]] ExceptionDecorator \u00b6 ExceptionDecorator ( self , exception : Exception ) ExceptionDecorator exception is a decorator on a real exception. This will ensure that assert ExceptionDecorator.__bool__ == False . This permit to return exception as a 'FAILURE' status. NodeMetadata \u00b6 NodeMetadata ( self , / , * args , ** kwargs ) NodeMetadata is our node definition. A NodeMetadata is used to keep information on name, properties name, and relations ship name between a hierachical construct of functions. This permit us to print or analyze all information of a behaviour tree. Attributes name (str) : named operation properties (List[str]) : a list of property name (an int value, ...). edges (List[str]) : a list of member name which act as edges (a child, ...). node_metadata \u00b6 node_metadata ( name : Union [ str , NoneType ] = None , properties : Union [ List [ str ], NoneType ] = None , edges : Union [ List [ str ], NoneType ] = None ) 'node_metadata' is a function decorator which add meta information about node. We add a property on decorated function named '__node_metadata'. Parameters name (Optional[str]) : override name of decorated function, default is function name left striped with '_' properties (Optional[List[str]]) : a list of property name ([] as default) edges (Optional[List[str]]) : a list of edges name ([\"child\", \"children\"] as default) Returns the decorator function","title":"definition"},{"location":"api/definition/#async_btreedefinition","text":"Common definition.","title":"async_btree.definition"},{"location":"api/definition/#callablefunction-type","text":"Specify something callable with or without async: CallableFunction = Union[Callable[..., Awaitable[Any]], Callable]","title":"CallableFunction Type"},{"location":"api/definition/#asyncinnerfunction-type","text":"Function signature of async function implementation: AsyncInnerFunction = Callable[[], Awaitable[Any]]","title":"AsyncInnerFunction Type"},{"location":"api/definition/#exceptiondecorator","text":"ExceptionDecorator ( self , exception : Exception ) ExceptionDecorator exception is a decorator on a real exception. This will ensure that assert ExceptionDecorator.__bool__ == False . This permit to return exception as a 'FAILURE' status.","title":"ExceptionDecorator"},{"location":"api/definition/#nodemetadata","text":"NodeMetadata ( self , / , * args , ** kwargs ) NodeMetadata is our node definition. A NodeMetadata is used to keep information on name, properties name, and relations ship name between a hierachical construct of functions. This permit us to print or analyze all information of a behaviour tree. Attributes name (str) : named operation properties (List[str]) : a list of property name (an int value, ...). edges (List[str]) : a list of member name which act as edges (a child, ...).","title":"NodeMetadata"},{"location":"api/definition/#node_metadata","text":"node_metadata ( name : Union [ str , NoneType ] = None , properties : Union [ List [ str ], NoneType ] = None , edges : Union [ List [ str ], NoneType ] = None ) 'node_metadata' is a function decorator which add meta information about node. We add a property on decorated function named '__node_metadata'. Parameters name (Optional[str]) : override name of decorated function, default is function name left striped with '_' properties (Optional[List[str]]) : a list of property name ([] as default) edges (Optional[List[str]]) : a list of edges name ([\"child\", \"children\"] as default) Returns the decorator function","title":"node_metadata"},{"location":"api/leaf/","text":"async_btree.leaf \u00b6 Leaf definition. action \u00b6 action ( target : Union [ Callable [ ... , Awaitable [ Any ]], Callable ], ** kwargs ) -> Callable [[], Awaitable [ Any ]] Declare an action leaf. Action is an awaitable closure of specified function. Parameters target (CallableFunction) : awaitable function kwargs : optional kwargs argument to pass on target function Returns (AsyncInnerFunction) : an awaitable function. condition \u00b6 condition ( target : Union [ Callable [ ... , Awaitable [ Any ]], Callable ], ** kwargs ) -> Callable [[], Awaitable [ Any ]] Declare a condition leaf. Condition is an awaitable closure of specified function. Parameters target (CallableFunction) : awaitable function which be evaluated as True/False. kwargs : optional kwargs argument to pass on target function Returns (AsyncInnerFunction) : an awaitable function.","title":"leaf"},{"location":"api/leaf/#async_btreeleaf","text":"Leaf definition.","title":"async_btree.leaf"},{"location":"api/leaf/#action","text":"action ( target : Union [ Callable [ ... , Awaitable [ Any ]], Callable ], ** kwargs ) -> Callable [[], Awaitable [ Any ]] Declare an action leaf. Action is an awaitable closure of specified function. Parameters target (CallableFunction) : awaitable function kwargs : optional kwargs argument to pass on target function Returns (AsyncInnerFunction) : an awaitable function.","title":"action"},{"location":"api/leaf/#condition","text":"condition ( target : Union [ Callable [ ... , Awaitable [ Any ]], Callable ], ** kwargs ) -> Callable [[], Awaitable [ Any ]] Declare a condition leaf. Condition is an awaitable closure of specified function. Parameters target (CallableFunction) : awaitable function which be evaluated as True/False. kwargs : optional kwargs argument to pass on target function Returns (AsyncInnerFunction) : an awaitable function.","title":"condition"},{"location":"api/parallele/","text":"parallele \u00b6 parallele ( children : List [ Union [ Callable [ ... , Awaitable [ Any ]], Callable ]], succes_threshold : int = - 1 ) -> Callable [[], Awaitable [ Any ]] Return an awaitable function which run children in parallele. succes_threshold parameter generalize traditional sequence/fallback, and must be in [0, len(children)], default value is len(children) if success = succes_threshold, return a success if failure = len(children) - succes_threshold, return a failure Parameters children (List[CallableFunction]) : list of Awaitable succes_threshold (int) : succes threshold value, default len(children) Returns (AsyncInnerFunction) : an awaitable function.","title":"parallele"},{"location":"api/parallele/#parallele","text":"parallele ( children : List [ Union [ Callable [ ... , Awaitable [ Any ]], Callable ]], succes_threshold : int = - 1 ) -> Callable [[], Awaitable [ Any ]] Return an awaitable function which run children in parallele. succes_threshold parameter generalize traditional sequence/fallback, and must be in [0, len(children)], default value is len(children) if success = succes_threshold, return a success if failure = len(children) - succes_threshold, return a failure Parameters children (List[CallableFunction]) : list of Awaitable succes_threshold (int) : succes threshold value, default len(children) Returns (AsyncInnerFunction) : an awaitable function.","title":"parallele"},{"location":"api/utils/","text":"async_btree.utils \u00b6 Utility function. amap \u00b6 amap ( corofunc : Callable [[ Any ], Awaitable [ ~ T ]], iterable : Union [ AsyncIterable , Iterable ]) -> AsyncGenerator [ ~ T , NoneType ] Map an async function onto an iterable or an async iterable. This simplify writing of mapping a function on something iterable between 'async for ...' and 'for...' . Parameters corofunc (Callable[[Any], Awaitable[T]]) : coroutine function iterable (Union[AsyncIterable, Iterable]) : iterable or async iterable collection which will be applied. Returns AsyncGenerator[T] : an async iterator of corofunc(item) Example [i async for i in amap(inc, afilter(even, [0, 1, 2, 3, 4]))] afilter \u00b6 afilter ( corofunc : Callable [[ Any ], Awaitable [ bool ]], iterable : Union [ AsyncIterable , Iterable ]) -> AsyncGenerator [ ~ T , NoneType ] Filter an iterable or an async iterable with an async function. This simplify writing of filtering by a function on something iterable between 'async for ...' and 'for...' . Parameters corofunc (Callable[[Any], Awaitable[bool]]) : filter async function iterable (Union[AsyncIterable, Iterable]) : iterable or async iterable collection which will be applied. Returns (AsyncGenerator[T]) : an async iterator of item which satisfy corofunc(item) == True Example [i async for i in amap(inc, afilter(even, [0, 1, 2, 3, 4]))] run \u00b6 run ( kernel , target , * args ) Curio run with independent contextvars. This mimic asyncio framework behaviour. copy_context().run(kernel.run, target, *args)","title":"utils"},{"location":"api/utils/#async_btreeutils","text":"Utility function.","title":"async_btree.utils"},{"location":"api/utils/#amap","text":"amap ( corofunc : Callable [[ Any ], Awaitable [ ~ T ]], iterable : Union [ AsyncIterable , Iterable ]) -> AsyncGenerator [ ~ T , NoneType ] Map an async function onto an iterable or an async iterable. This simplify writing of mapping a function on something iterable between 'async for ...' and 'for...' . Parameters corofunc (Callable[[Any], Awaitable[T]]) : coroutine function iterable (Union[AsyncIterable, Iterable]) : iterable or async iterable collection which will be applied. Returns AsyncGenerator[T] : an async iterator of corofunc(item) Example [i async for i in amap(inc, afilter(even, [0, 1, 2, 3, 4]))]","title":"amap"},{"location":"api/utils/#afilter","text":"afilter ( corofunc : Callable [[ Any ], Awaitable [ bool ]], iterable : Union [ AsyncIterable , Iterable ]) -> AsyncGenerator [ ~ T , NoneType ] Filter an iterable or an async iterable with an async function. This simplify writing of filtering by a function on something iterable between 'async for ...' and 'for...' . Parameters corofunc (Callable[[Any], Awaitable[bool]]) : filter async function iterable (Union[AsyncIterable, Iterable]) : iterable or async iterable collection which will be applied. Returns (AsyncGenerator[T]) : an async iterator of item which satisfy corofunc(item) == True Example [i async for i in amap(inc, afilter(even, [0, 1, 2, 3, 4]))]","title":"afilter"},{"location":"api/utils/#run","text":"run ( kernel , target , * args ) Curio run with independent contextvars. This mimic asyncio framework behaviour. copy_context().run(kernel.run, target, *args)","title":"run"}]}